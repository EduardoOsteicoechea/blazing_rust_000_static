name: Deploy Static Files to EC2

on:
  push:
    branches: [ "main" ] # This workflow triggers on pushes to the 'main' branch.

jobs:
  deploy:
    runs-on: ubuntu-latest # The job will run on a fresh Ubuntu runner provided by GitHub Actions.
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Checks out your repository code into the runner.

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # Configures AWS credentials for interacting with AWS services.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Your AWS Access Key ID, stored as a GitHub secret.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Your AWS Secret Access Key, stored as a GitHub secret.
          aws-region: ${{ secrets.AWS_REGION }} # Your AWS region, stored as a GitHub secret.

      - name: Prepare flattened static files
        id: prepare_static_files # Assign an ID to this step to reference its outputs.
        run: |
          # Create a temporary directory on the runner to collect all static files in a flat structure.
          FLAT_STATIC_DIR=$(mktemp -d)
          echo "Created temporary directory for flattened files: $FLAT_STATIC_DIR"

          # Find all .css and .js files in the entire repository and copy them to the temporary directory.
          # This flattens the structure, putting all files directly into $FLAT_STATIC_DIR.
          # If files with the same name exist in different subdirectories, the last one found will overwrite previous ones.
          find . -type f \( -name "*.css" -o -name "*.js" \) -exec cp -L {} "$FLAT_STATIC_DIR" \;
          
          echo "Copied files to temporary directory:"
          ls -l "$FLAT_STATIC_DIR" # List files to verify.

          # Make the path of the temporary directory available as an output for the next step.
          echo "static_files_dir=$FLAT_STATIC_DIR" >> $GITHUB_OUTPUT

      - name: Ensure /var/www/html directory exists and is writable on EC2
        uses: appleboy/ssh-action@master # Use SSH action to run commands on EC2.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Ensuring /var/www/html exists and has correct permissions..."
            sudo mkdir -p /var/www/html # Creates directory if it doesn't exist, -p means no error if exists.
            # Change ownership so your SSH user can write to it.
            # Replace ${{ secrets.USERNAME }} with 'ubuntu' or your actual SSH username if it differs.
            sudo chown -R ${{ secrets.USERNAME }}:${{ secrets.USERNAME }} /var/www/html
            # Set appropriate permissions for web content, allowing Nginx to read.
            sudo chmod -R 755 /var/www/html

      - name: Copy Flattened Static Files to EC2
        uses: appleboy/scp-action@master # Uses SCP action to securely copy files.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Source is now the *contents* of the temporary, flattened directory.
          # The trailing '/*' is crucial to copy contents, not the directory itself.
          source: "${{ steps.prepare_static_files.outputs.static_files_dir }}/*"
          target: "/var/www/html" # Destination directory on EC2.
          overwrite: true # Overwrite existing files on the EC2 instance.

      - name: Connect to EC2 instance and Restart Nginx
        uses: appleboy/ssh-action@master # Uses SSH action to connect and run commands.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Clearing Nginx cache..."
            sudo rm -rf /var/cache/nginx/*

            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            echo "Reloading Nginx configuration..."
            sudo systemctl reload nginx 

      - name: Wait for deployment
        run: |
          echo "Waiting 10 seconds for Nginx to settle..."
          sleep 10