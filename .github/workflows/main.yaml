name: Deploy Static Files to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure /var/www/html directory exists on EC2
        uses: appleboy/ssh-action@master # Use SSH action to run commands on EC2
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Ensuring /var/www/html exists and has correct permissions..."
            sudo mkdir -p /var/www/html # Creates directory if it doesn't exist, -p means no error if exists
            # Change ownership so your SSH user can write to it
            sudo chown -R ${{ secrets.USERNAME }}:${{ secrets.USERNAME }} /var/www/html 
            # Set appropriate permissions for web content, allowing Nginx to read
            sudo chmod -R 755 /var/www/html 

      - name: Copy Static Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "**/*.css,**/*.js"
          target: "/var/www/html"
          overwrite: true

      - name: Connect to EC2 instance and Restart Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Clearing Nginx cache..."
            sudo rm -rf /var/cache/nginx/*

            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            echo "Reloading Nginx configuration..."
            sudo systemctl reload nginx 

      - name: Wait for deployment
        run: |
          echo "Waiting 10 seconds for Nginx to settle..."
          sleep 10