name: Deploy Blazing Rust Static Files to EC2

on:
  push:
    branches: [ "main" ] # This workflow triggers on pushes to the 'main' branch.

jobs:
  deploy:
    runs-on: ubuntu-latest # The job will run on a fresh Ubuntu runner provided by GitHub Actions.
    steps:
      - name: Checkout workflow file (no repo content needed on runner for this strategy)
        uses: actions/checkout@v3 # Only needed to run the workflow itself, not to access repo content for copy.

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # Configures AWS credentials for interacting with AWS services.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Your AWS Access Key ID, stored as a GitHub secret.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Your AWS Secret Access Key, stored as a GitHub secret.
          aws-region: ${{ secrets.AWS_REGION }} # Your AWS region, stored as a GitHub secret.

      - name: Deploy Static Files via EC2 SSH Clone and Move
        uses: appleboy/ssh-action@master # Uses the SSH action to connect to your EC2 instance and run commands.
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            REMOTE_REPO_URL="https://github.com/EduardoOsteicoechea/blazing_rust_000_static.git"
            TEMP_CLONE_DIR="/tmp/static_repo_$(date +%s)" # Unique temporary directory for cloning

            echo "Ensuring /var/www/html exists and has correct permissions..."
            # Create /var/www/html if it doesn't exist.
            sudo mkdir -p /var/www/html
            # Ensure the SSH user has write permissions to /var/www/html and its contents.
            # Replace ${{ secrets.USERNAME }} with your actual SSH username if it's not 'ubuntu'.
            sudo chown -R ${{ secrets.USERNAME }}:${{ secrets.USERNAME }} /var/www/html
            # Set appropriate permissions for web content (read/execute for others, full for owner).
            sudo chmod -R 755 /var/www/html

            echo "Cloning repository to temporary directory: $TEMP_CLONE_DIR"
            # Clone the repository into a temporary directory on the EC2 instance.
            git clone "$REMOTE_REPO_URL" "$TEMP_CLONE_DIR"

            # Check if cloning was successful
            if [ ! -d "$TEMP_CLONE_DIR" ]; then
                echo "Error: Failed to clone repository $REMOTE_REPO_URL"
                exit 1
            fi

            echo "Copying .css and .js files to /var/www/html/ (flattening structure)..."
            # Find all .css and .js files within the cloned repository and copy them
            # directly into /var/www/html/.
            # The -t option for cp ensures the target directory exists.
            # The last found file will overwrite any previous files with the same name.
            sudo find "$TEMP_CLONE_DIR" -type f \( -name "*.css" -o -name "*.js" \) -exec cp {} /var/www/html/ \;

            echo "Cleaning up temporary cloned repository: $TEMP_CLONE_DIR"
            # Remove the temporary cloned repository.
            sudo rm -rf "$TEMP_CLONE_DIR"

            echo "Clearing Nginx cache..."
            sudo rm -rf /var/cache/nginx/*

            echo "Restarting Nginx..."
            sudo systemctl restart nginx
            echo "Reloading Nginx configuration..."
            sudo systemctl reload nginx 

      - name: Wait for deployment
        run: |
          echo "Waiting 10 seconds for Nginx to settle..."
          sleep 10